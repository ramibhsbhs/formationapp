{"version":3,"file":"src_app_condidat_condidat_module_ts.js","mappings":"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","sources":["./src/app/condidat/certification/certification-deatils/certification-deatils.component.ts","./src/app/condidat/certification/certification-deatils/certification-deatils.component.html","./src/app/condidat/certification/certification-list/certification-list.component.ts","./src/app/condidat/certification/certification-list/certification-list.component.html","./src/app/condidat/comdidat-routing.module.ts","./src/app/condidat/components/condidat-formation-card/condidat-formation-card.component.ts","./src/app/condidat/components/condidat-formation-card/condidat-formation-card.component.html","./src/app/condidat/condidat.module.ts","./src/app/condidat/core/condidat.service.ts","./src/app/condidat/formation/formation-details/formation-details.component.ts","./src/app/condidat/formation/formation-details/formation-details.component.html","./src/app/condidat/formation/formations/formations.component.ts","./src/app/condidat/formation/formations/formations.component.html","./src/app/condidat/home/home.component.ts","./src/app/condidat/home/home.component.html","./src/app/condidat/notifications/notifications.component.ts","./src/app/condidat/notifications/notifications.component.html","./src/app/condidat/quiz/quiz-validation/quiz-validation.component.ts","./src/app/condidat/quiz/quiz-validation/quiz-validation.component.html","./src/app/core/models/notification.model.ts","./src/app/core/services/certification.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Certification } from 'src/app/core/models/certification.model';\nimport { CertificationService } from 'src/app/core/services/certification.service';\n\n@Component({\n  selector: 'app-certification-deatils',\n  templateUrl: './certification-deatils.component.html',\n  styleUrls: ['./certification-deatils.component.scss']\n})\nexport class CertificationDeatilsComponent implements OnInit {\n\n  certification: Certification | null = null;\n  isLoading = false;\n  error: string | null = null;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private certificationService: CertificationService\n  ) { }\n\n  ngOnInit(): void {\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.loadCertification(id);\n  }\n\n  loadCertification(id: number): void {\n    this.isLoading = true;\n    this.error = null;\n\n    this.certificationService.getCertificationById(id).subscribe({\n      next: (data) => {\n        this.certification = data;\n        this.isLoading = false;\n      },\n      error: (err) => {\n        this.error = 'Failed to load certification. Please try again later.';\n        this.isLoading = false;\n        console.error('Error loading certification:', err);\n      }\n    });\n  }\n\n  goBack(): void {\n    this.router.navigate(['/condidat/certifications']);\n  }\n\n  getPassStatus(score: number): string {\n    return score >= 70 ? 'Passed' : 'Failed';\n  }\n\n  getScoreClass(score: number): string {\n    if (score >= 90) return 'text-green-700 bg-green-100';\n    if (score >= 70) return 'text-green-600 bg-green-50';\n    if (score >= 50) return 'text-yellow-600 bg-yellow-50';\n    return 'text-red-600 bg-red-50';\n  }\n\n  printCertificate(): void {\n    window.print();\n  }\n}\n","<div class=\"p-6\">\n    <div *ngIf=\"isLoading\" class=\"flex justify-center items-center py-10\">\n        <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n    </div>\n\n    <div *ngIf=\"error\" class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6\">\n        {{ error }}\n    </div>\n\n    <div *ngIf=\"!isLoading && !error && certification\" class=\"print:shadow-none\">\n        <!-- Certificate -->\n        <div\n            class=\"bg-white rounded-lg shadow-lg overflow-hidden mb-6 max-w-4xl mx-auto print:shadow-none print:mx-0 certificate-wrapper\">\n            <div\n                class=\"p-8 print:p-1 certificate-container border-8 border-double border-gray-200 m-4 print:m-0 print:border-0\">\n                <!-- Certificate Header -->\n                <div class=\"text-center mb-8\">\n                    <div class=\"flex justify-center mb-4\">\n                        <div class=\"w-24 h-24 rounded-full bg-yellow-100 flex items-center justify-center\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-12 w-12 text-yellow-500\" fill=\"none\"\n                                viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                    d=\"M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z\" />\n                            </svg>\n                        </div>\n                    </div>\n                    <h1 class=\"text-3xl font-bold text-gray-800 mb-2\">CERTIFICATE OF COMPLETION</h1>\n                    <p class=\"text-gray-600\">This is to certify that</p>\n                </div>\n\n                <!-- Certificate Body -->\n                <div class=\"text-center mb-8\">\n                    <h2 class=\"text-2xl font-bold text-yellow-600 mb-2\">{{ certification.user.userName }}</h2>\n                    <p class=\"text-gray-600 mb-4\">has successfully completed</p>\n                    <h3 class=\"text-xl font-bold text-gray-800 mb-1\">{{ certification.session.formation.title }}</h3>\n                    <p class=\"text-gray-700\">{{ certification.session.title }}</p>\n                    <p class=\"text-gray-600 mt-3\">with a score of</p>\n                    <div class=\"flex justify-center my-3\">\n                        <div class=\"text-xl font-bold py-1 px-4 rounded-full\"\n                            [ngClass]=\"getScoreClass(certification.score)\">\n                            {{ certification.score }}%\n                        </div>\n                    </div>\n                    <div class=\"flex justify-center\">\n                        <div class=\"px-3 py-1 rounded-full text-sm font-semibold\"\n                            [ngClass]=\"certification.score >= 70 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\">\n                            {{ getPassStatus(certification.score) }}\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Certificate Footer -->\n                <div class=\"text-center mb-4\">\n                    <p class=\"text-gray-600\">\n                        From {{ certification.session.startDate | date:'mediumDate' }} to {{\n                        certification.session.endDate | date:'mediumDate' }}\n                    </p>\n                    <div class=\"mt-8 border-t pt-4 border-gray-200 inline-block\">\n                        <p class=\"font-bold\">Authorized Signature</p>\n                    </div>\n                </div>\n\n                <!-- Certificate Description -->\n                <div class=\"mt-6 text-center text-gray-500 text-sm\">\n                    <p>{{ certification.description }}</p>\n                </div>\n\n                <!-- Certificate ID -->\n                <div class=\"mt-4 text-center text-gray-400 text-xs\">\n                    <p>Certificate ID: {{ certification.id }}</p>\n                    <p>Issued on: {{ certification.createdAt | date:'medium' }}</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <!-- Print Button -->\n    <div class=\"fixed bottom-4 right-4 print:hidden\">\n        <button (click)=\"printCertificate()\"\n            class=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md flex items-center shadow-lg\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\"\n                stroke=\"currentColor\">\n                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                    d=\"M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z\" />\n            </svg>\n            Print Certificate\n        </button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Certification } from 'src/app/core/models/certification.model';\nimport { CertificationService } from 'src/app/core/services/certification.service';\n\n@Component({\n  selector: 'app-certification-list',\n  templateUrl: './certification-list.component.html',\n  styleUrls: ['./certification-list.component.scss']\n})\nexport class CertificationListComponent implements OnInit {\n  certifications: Certification[] = [];\n  isLoading = false;\n  error: string | null = null;\n\n  constructor(private certificationService: CertificationService) { }\n\n  ngOnInit(): void {\n    this.loadCertifications();\n  }\n\n  loadCertifications(): void {\n    this.isLoading = true;\n    this.error = null;\n\n    this.certificationService.getUserCertifications().subscribe({\n      next: (data) => {\n        this.certifications = data;\n        this.isLoading = false;\n      },\n      error: (err) => {\n        this.error = 'Failed to load certifications. Please try again later.';\n        this.isLoading = false;\n        console.error('Error loading certifications:', err);\n      }\n    });\n  }\n\n  getPassStatus(score: number): string {\n    return score >= 70 ? 'Passed' : 'Failed';\n  }\n\n  getScoreClass(score: number): string {\n    if (score >= 90) return 'text-green-700 bg-green-100';\n    if (score >= 70) return 'text-green-600 bg-green-50';\n    if (score >= 50) return 'text-yellow-600 bg-yellow-50';\n    return 'text-red-600 bg-red-50';\n  }\n}\n","<div class=\"p-6\">\n    <h2 class=\"text-2xl font-bold mb-6 text-gray-800\">My Certifications</h2>\n\n    <div *ngIf=\"isLoading\" class=\"flex justify-center items-center py-10\">\n        <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n    </div>\n\n    <div *ngIf=\"error\" class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-6\">\n        {{ error }}\n    </div>\n\n    <div *ngIf=\"!isLoading && !error\">\n        <div *ngIf=\"certifications.length === 0\" class=\"text-center py-8\">\n            <p class=\"text-gray-600\">You don't have any certifications yet.</p>\n        </div>\n\n        <div *ngIf=\"certifications.length > 0\" class=\"overflow-x-auto\">\n            <table class=\"min-w-full bg-white border border-gray-200 shadow-md rounded-lg overflow-hidden\">\n                <thead class=\"bg-gray-50\">\n                    <tr>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Formation</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Session</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Date\n                        </th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Score\n                        </th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Status</th>\n                        <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                            Actions</th>\n                    </tr>\n                </thead>\n                <tbody class=\"divide-y divide-gray-200\">\n                    <tr *ngFor=\"let cert of certifications\" class=\"hover:bg-gray-50\">\n                        <td class=\"px-6 py-4\">{{ cert.session.formation.title }}</td>\n                        <td class=\"px-6 py-4\">{{ cert.session.title }}</td>\n                        <td class=\"px-6 py-4\">\n                            {{ cert.session.startDate | date:'shortDate' }} - {{ cert.session.endDate | date:'shortDate'\n                            }}\n                        </td>\n                        <td class=\"px-6 py-4\">\n                            <span class=\"px-2 py-1 rounded-full text-sm font-semibold\"\n                                [ngClass]=\"getScoreClass(cert.score)\">\n                                {{ cert.score }}%\n                            </span>\n                        </td>\n                        <td class=\"px-6 py-4\">\n                            <span class=\"px-2 py-1 rounded-full text-sm\"\n                                [ngClass]=\"cert.score >= 70 ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'\">\n                                {{ getPassStatus(cert.score) }}\n                            </span>\n                        </td>\n                        <td class=\"px-6 py-4 whitespace-nowrap\">\n                            <a [routerLink]=\"['.', cert.id]\"\n                                class=\"text-blue-500 hover:text-blue-700\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" fill=\"none\" viewBox=\"0 0 24 24\"\n                                    stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                        d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                                </svg>\n                            </a>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { FormationsComponent } from './formation/formations/formations.component';\nimport { FormationDetailsComponent } from './formation/formation-details/formation-details.component';\nimport { QuizPassingComponent } from './quiz/quiz-passing/quiz-passing.component';\nimport { CertificationDeatilsComponent } from './certification/certification-deatils/certification-deatils.component';\nimport { CertificationListComponent } from './certification/certification-list/certification-list.component';\nimport { QuizValidationComponent } from './quiz/quiz-validation/quiz-validation.component';\nimport { NotificationsComponent } from './notifications/notifications.component';\n\nconst routes: Routes = [\n  { path: \"\", component: HomeComponent },\n  { path: \"formations\", component: FormationsComponent },\n  { path: \"formations/:id\", component: FormationDetailsComponent },\n  { path: \"formations/:formationId/finaltest/:quizId\", component: QuizPassingComponent },\n  { path: \"validate-quiz/:sessionId\", component: QuizValidationComponent },\n  { path: \"quiz/:quizId/:sessionId\", component: QuizPassingComponent },\n  { path: \"certification\", component: CertificationListComponent },\n  { path: \"certification/:id\", component: CertificationDeatilsComponent },\n  { path: \"notifications\", component: NotificationsComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CondidatRoutingModule { }\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { CondidatFormation } from '../../core/models';\n\n@Component({\n  selector: 'app-condidat-formation-card',\n  templateUrl: './condidat-formation-card.component.html',\n  styleUrls: ['./condidat-formation-card.component.scss']\n})\nexport class CondidatFormationCardComponent implements OnInit {\n\n  @Input() formation!: CondidatFormation;\n  @Output() viewDetails = new EventEmitter<number>();\n\n  constructor() { }\n\n  ngOnInit(): void { }\n\n  getCategoryColor(category: string): string {\n    switch (category) {\n      case 'Technical Training':\n        return 'bg-blue-100 text-blue-800';\n      case 'Soft Skills':\n        return 'bg-red-100 text-red-800';\n      case 'Leadership':\n        return 'bg-green-100 text-green-800';\n      case 'Project Management':\n        return 'bg-purple-100 text-purple-800';\n      case 'Compliance':\n        return 'bg-yellow-100 text-yellow-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  }\n\n  getCategoryLabel(category: string): string {\n    switch (category) {\n      case 'Technical Training':\n        return 'Technique';\n      case 'Soft Skills':\n        return 'Sécurité';\n      case 'Leadership':\n        return 'Qualité';\n      case 'Project Management':\n        return 'Project Management';\n      case 'Compliance':\n        return 'Compliance';\n      default:\n        return category;\n    }\n  }\n\n}\n","<div class=\"bg-white rounded-lg shadow-md overflow-hidden border border-gray-200 hover:shadow-lg transition-shadow\">\n    <div class=\"p-4\">\n        <div class=\"flex justify-between items-start mb-3\">\n            <h3 class=\"font-semibold text-gray-800 text-lg\">{{ formation.title }}</h3>\n            <span class=\"px-2 py-1 rounded-full text-xs font-medium\" [ngClass]=\"getCategoryColor(formation.category)\">\n                {{ getCategoryLabel(formation.category) }}\n            </span>\n        </div>\n\n        <p class=\"text-gray-600 text-sm mb-4 line-clamp-2 min-h-[3.5rem]\">\n            {{ formation.description }}\n        </p>\n\n        <div class=\"grid grid-cols-2 gap-2 mb-3\">\n            <div class=\"flex items-center text-gray-600 text-sm\">\n                <i class=\"fa-solid fa-calendar text-gray-400 w-4 h-4 mr-2\"></i>\n                {{ formation.sessions.length }} sessions\n            </div>\n            <div class=\"flex items-center text-gray-600 text-sm\">\n                <i class=\"fa-solid fa-book text-gray-400 w-4 h-4 mr-2\"></i>\n                {{ formation.modules.length }} modules\n            </div>\n        </div>\n    </div>\n\n    <div class=\"px-4 py-3 bg-gray-50 border-t border-gray-200 flex justify-end\">\n        <button [routerLink]=\"['./', formation.id]\" class=\"text-gray-500 hover:text-blue-600\">\n            <i class=\"fa-solid fa-eye text-gray-500 hover:text-primary\"></i>\n        </button>\n    </div>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CondidatRoutingModule } from './comdidat-routing.module';\nimport { HomeComponent } from './home/home.component';\nimport { CondidatFormationCardComponent } from './components/condidat-formation-card/condidat-formation-card.component';\nimport { FormationsComponent } from './formation/formations/formations.component';\nimport { QuizPassingComponent } from './quiz/quiz-passing/quiz-passing.component';\nimport { FormsModule } from '@angular/forms';\nimport { FormationDetailsComponent } from './formation/formation-details/formation-details.component';\nimport { CertificationListComponent } from './certification/certification-list/certification-list.component';\nimport { CertificationDeatilsComponent } from './certification/certification-deatils/certification-deatils.component';\nimport { QuizValidationComponent } from './quiz/quiz-validation/quiz-validation.component';\nimport { NotificationsComponent } from './notifications/notifications.component';\n\n\n@NgModule({\n  declarations: [\n    HomeComponent,\n    CondidatFormationCardComponent,\n    FormationsComponent,\n    QuizPassingComponent,\n    FormationDetailsComponent,\n    CertificationListComponent,\n    CertificationDeatilsComponent,\n    QuizValidationComponent,\n    NotificationsComponent\n  ],\n  imports: [\n    CommonModule,\n    CondidatRoutingModule,\n    FormsModule\n  ]\n})\nexport class CondidatModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { CondidatFormation } from './models';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CondidatService {\n  private baseUrl = environment.baseUrl;\n\n  constructor(private http: HttpClient) { }\n\n  getFormations() {\n    return this.http.get<CondidatFormation[]>(`${this.baseUrl}/formation/condidat`);\n  }\n\n  getFormation(id: number) {\n    return this.http.get<CondidatFormation>(`${this.baseUrl}/formation/condidat/${id}`);\n  }\n\n  /**\n   * Vérifie si l'utilisateur peut passer un quiz pour une session donnée\n   * @param sessionId ID de la session\n   * @returns Observable avec les informations d'éligibilité\n   */\n  checkQuizEligibility(sessionId: number): Observable<{\n    canTakeQuiz: boolean;\n    quizId: number;\n    previousAttempt: any;\n    formationTitle: string;\n    sessionTitle: string;\n  }> {\n    return this.http.get<any>(`${this.baseUrl}/quizs/validate/${sessionId}`);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CondidatFormation } from '../../core/models';\nimport { CondidatService } from '../../core/condidat.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Subscription, interval } from 'rxjs';\n\n@Component({\n  selector: 'app-formation-details',\n  templateUrl: './formation-details.component.html',\n  styleUrls: ['./formation-details.component.scss']\n})\nexport class FormationDetailsComponent implements OnInit {\n  loading = false;\n  error: string | null = null;\n  formation: CondidatFormation | null = null;\n\n  constructor(\n    private condidatService: CondidatService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n\n    const id = Number(this.route.snapshot.paramMap.get('id'));\n    this.loadFormation(id);\n\n\n  }\n  loadFormation(id: number) {\n    this.condidatService.getFormation(id).subscribe({\n      next: (formation) => {\n        this.formation = formation;\n        this.loading = false;\n        console.log(this.formation);\n        this.initCountdown();\n      },\n      error: (err) => {\n        this.error = err?.message || 'Failed to load formation.';\n        this.loading = false;\n      }\n    });\n  }\n  getFileIcon(type: string): string {\n    switch (type.toLowerCase()) {\n      case 'pdf':\n        return '/assets/icons/pdf.svg';\n      case 'image':\n        return 'fas fa-image';\n      case 'video':\n        return 'fas fa-video';\n      case 'document':\n        return 'fas fa-file-word';\n      default:\n        return 'fas fa-file';\n    }\n\n  }\n  getFileIconColor(type: string): string {\n    switch (type.toLowerCase()) {\n      case 'pdf':\n        return 'text-red-500';\n      case 'image':\n        return 'text-blue-500';\n      case 'video':\n        return 'text-green-500';\n      case 'document':\n        return 'text-yellow-500';\n      default:\n        return 'text-gray-500';\n    }\n  }\n\n\n\n  // session timeout\n  // Countdown properties\n  countdownText = '';\n  countdownState: 'upcoming' | 'ongoing' | 'finished' = 'upcoming';\n  private timerSub?: Subscription;\n\n  ngOnDestroy(): void {\n    this.timerSub?.unsubscribe();\n  }\n  formatDuration(ms: number): string {\n    const days = Math.floor(ms / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((ms % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((ms % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((ms % (1000 * 60)) / 1000);\n    const parts: string[] = [];\n    if (days) parts.push(`${days}d`);\n    if (hours) parts.push(`${hours}h`);\n    if (minutes) parts.push(`${minutes}m`);\n    parts.push(`${seconds}s`);\n    return parts.join(' ');\n  }\n  initCountdown() {\n    if (!this.formation?.sessions?.length) return;\n    const session = this.formation.sessions[this.formation.sessions.length - 1];\n\n    this.timerSub = interval(1000).subscribe(() => {\n      const now = new Date();\n      const start = new Date(session.startDate);\n      const end = new Date(session.endDate);\n      let diffMs: number;\n\n      if (now < start) {\n        this.countdownState = 'upcoming';\n        diffMs = start.getTime() - now.getTime();\n      } else if (now >= start && now <= end) {\n        this.countdownState = 'ongoing';\n        diffMs = end.getTime() - now.getTime();\n      } else {\n        this.countdownState = 'finished';\n        this.countdownText = '';\n        this.timerSub?.unsubscribe();\n        return;\n      }\n\n      this.countdownText = this.formatDuration(diffMs);\n    });\n  }\n\n\n  /**\n   * Vérifie si l'utilisateur peut passer le quiz pour une session donnée\n   * en fonction des dates et de l'état de la session\n   * @param session La session à vérifier\n   * @returns true si l'utilisateur peut passer le quiz, false sinon\n   */\n  canTakeQuiz(session: any): boolean {\n    // Vérifier si l'utilisateur a le droit de repasser le quiz (selon les règles métier)\n    if (!session.canRepass) {\n      return false;\n    }\n\n    // Vérifier si la date actuelle est dans la période de la session\n    const now = new Date();\n    const start = new Date(session.startDate);\n    const end = new Date(session.endDate);\n\n    // L'utilisateur peut passer le quiz si la date actuelle est entre la date de début et la date de fin\n    return now >= start && now <= end;\n  }\n\n  /**\n   * Obtient le message d'état de la session en fonction des dates\n   * @param session La session à vérifier\n   * @returns Un message décrivant l'état de la session\n   */\n  getSessionStatusMessage(session: any): string {\n    const now = new Date();\n    const start = new Date(session.startDate);\n    const end = new Date(session.endDate);\n\n    if (now < start) {\n      return \"La session n'a pas encore commencé\";\n    } else if (now > end) {\n      return \"La session est terminée\";\n    } else {\n      return \"La session est en cours\";\n    }\n  }\n\n  /**\n   * Détermine la classe CSS à appliquer en fonction de l'état de la session\n   * @param session La session à vérifier\n   * @returns Une classe CSS pour le style du message d'état\n   */\n  getSessionStatusClass(session: any): string {\n    const now = new Date();\n    const start = new Date(session.startDate);\n    const end = new Date(session.endDate);\n\n    if (now < start) {\n      return \"text-blue-600\";\n    } else if (now > end) {\n      return \"text-red-600\";\n    } else {\n      return \"text-green-600\";\n    }\n  }\n\n}\n","<div class=\"min-h-screen bg-gray-50 p-8 relative\">\n\n    <!-- Countdown Timer -->\n    <div *ngIf=\"countdownState !== 'finished' && !loading && formation && countdownText !== ''\" [ngClass]=\"{\n             'bg-gradient-to-tr from-green-600 to-green-400 shadow-green-100': countdownState === 'upcoming',\n             'bg-gradient-to-r from-red-400 to-pink-500': countdownState === 'ongoing'\n           }\"\n        class=\"fixed top-6 right-6 text-white p-4 rounded-full shadow-md flex items-center space-x-3 animate-fade-in duration-700\">\n        <svg class=\"w-6 h-6 animate-pulse\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n        </svg>\n        <span class=\"text-sm font-medium\">\n            {{ countdownState === 'upcoming' ? ('Commence dans ' + countdownText) : ('Termine dans ' + countdownText) }}\n        </span>\n    </div>\n\n\n    <!-- Loading State -->\n    <div *ngIf=\"loading\" class=\"flex justify-center items-center h-screen\">\n        <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n    </div>\n\n    <!-- Error State -->\n    <div *ngIf=\"error\" class=\"p-4 max-w-4xl mx-auto\">\n        <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <strong class=\"font-bold\">Erreur!</strong>\n            <span class=\"block sm:inline\">{{ error }}</span>\n        </div>\n    </div>\n\n    <!-- Formation Data -->\n    <div *ngIf=\"formation && !loading\" class=\"max-w-4xl  space-y-8\">\n        <!-- Header -->\n        <div class=\"bg-white rounded-lg shadow-md p-6\">\n            <div class=\"flex items-center justify-between mb-4\">\n                <div class=\"flex items-center gap-2\">\n                    <span class=\"text-gray-500 font-medium text-lg\">Titre: </span>\n                    <span class=\"text-xl font-extrabold text-gray-700 inline uppercase\">{{ formation.title }}</span>\n                </div>\n                <span class=\"px-4 py-1 bg-blue-100 text-blue-800 rounded-full text-sm\">\n                    {{ formation.category }}\n                </span>\n            </div>\n            <div class=\"mb-4\">\n                <span class=\"text-gray-500 font-medium text-md\">Description: </span>\n                <p class=\"text-gray-600 text-base inline\">{{ formation.description }}</p>\n            </div>\n            <div>\n                <span class=\"text-gray-500 font-medium text-md\">Contenu: </span>\n                <div class=\"prose max-w-none inline text-gray-600 text-base\" [innerHTML]=\"formation.content\"></div>\n            </div>\n        </div>\n\n        <!-- Sessions -->\n        <div class=\"bg-white rounded-lg shadow-md p-6\">\n            <h2 class=\"text-2xl font-bold text-gray-900 mb-4\">Sessions de Formation</h2>\n            <div class=\"space-y-3\">\n                <div *ngFor=\"let session of formation.sessions\" class=\"p-3 border rounded-lg hover:bg-gray-50\">\n                    <div class=\"flex justify-between items-center\">\n                        <div>\n                            <h3 class=\"font-semibold text-lg text-gray-900\">{{ session.sessionTitle }}</h3>\n                            <div class=\"flex items-center gap-2\">\n                                <p class=\"text-sm text-gray-600\">\n                                    {{ session.startDate | date }} - {{ session.endDate | date }}\n                                </p>\n                                <span [ngClass]=\"getSessionStatusClass(session)\" class=\"text-xs font-medium\">\n                                    ({{ getSessionStatusMessage(session) }})\n                                </span>\n                            </div>\n\n                            <!-- Affichage du résultat si l'utilisateur a déjà passé le test -->\n                            <div *ngIf=\"session.hasAttempted\" class=\"mt-2\">\n                                <!-- Réussite -->\n                                <div *ngIf=\"session.score >= 70\" class=\"flex items-center text-green-600\">\n                                    <i class=\"fas fa-check-circle mr-2\"></i>\n                                    <span class=\"font-medium\">Félicitations ! Vous avez réussi avec un score de {{\n                                        session.score }}%</span>\n                                </div>\n\n                                <!-- Échec -->\n                                <div *ngIf=\"session.score < 70\" class=\"flex items-center text-red-600\">\n                                    <i class=\"fas fa-times-circle mr-2\"></i>\n                                    <span class=\"font-medium\">Vous n'avez pas réussi le test. Score : {{ session.score\n                                        }}%</span>\n                                </div>\n                            </div>\n                        </div>\n\n                        <!-- Bouton de test si disponible et dans la période de la session -->\n                        <a *ngIf=\"canTakeQuiz(session)\" [routerLink]=\"['/condidat/validate-quiz', session.sessionId]\"\n                            class=\"px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-xl text-sm font-medium flex items-center transition-colors cursor-pointer gap-2\">\n                            <span>Passer le test</span>\n                            <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                                    d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n                            </svg>\n                        </a>\n\n                        <!-- Message si le quiz est disponible mais hors période -->\n                        <div *ngIf=\"session.canRepass && !canTakeQuiz(session)\"\n                            class=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-xl text-sm font-medium flex items-center\">\n                            <i class=\"fas fa-clock mr-2\"></i>\n                            <span>{{ getSessionStatusMessage(session) }}</span>\n                        </div>\n\n                        <!-- Badge de statut -->\n                        <div *ngIf=\"!session.canRepass\" class=\"flex flex-col items-end\">\n                            <!-- Badge de réussite -->\n                            <span *ngIf=\"session.score >= 70\"\n                                class=\"px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm flex items-center\">\n                                <i class=\"fas fa-trophy mr-1\"></i>\n                                Réussi\n                            </span>\n\n                            <!-- Badge d'échec -->\n                            <span *ngIf=\"session.hasAttempted && session.score < 70\"\n                                class=\"px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm flex items-center\">\n                                <i class=\"fas fa-exclamation-circle mr-1\"></i>\n                                Non réussi\n                            </span>\n\n                            <!-- Badge générique si pas de score -->\n                            <span *ngIf=\"!session.hasAttempted\"\n                                class=\"px-3 py-1 bg-gray-100 text-gray-800 rounded-full text-sm\">\n                                Terminé\n                            </span>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf=\"formation.sessions.length===0\" class=\"flex\">\n\n                    <a\n                        class=\"nosession-group w-full relative group border rounded-lg p-4 bg-red-200/20 transition-colors\">\n                        <div class=\"flex items-center space-x-3\">\n                            <img src=\"/assets/icons/nofile.svg\" alt=\"File Icon\" class=\"w-14\" />\n                            <div>\n                                <p class=\"font-medium text-gray-700 truncate !mb-0\">\n                                    Aucune Session\n                                </p>\n                                <p class=\"text-sm text-gray-500 truncate !mb-0\">Aucune session disponible</p>\n                            </div>\n                        </div>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n        <!-- Modules -->\n        <div class=\"space-y-6\">\n            <!-- Module List -->\n            <div *ngFor=\"let module of formation.modules\" class=\"bg-white rounded-lg shadow-md p-6\">\n                <div class=\"flex justify-between mb-4\">\n                    <div class=\"flex items-center gap-2\">\n                        <span class=\"text-gray-500 font-medium text-md\">Titre : </span>\n                        <h2 class=\"text-2xl font-bold text-gray-600 !mb-0\">{{ module.title }}</h2>\n                    </div>\n                    <span class=\"text-gray-500 font-bold text-xs\">Module {{ module.id }}</span>\n                </div>\n\n                <div class=\"flex items-center gap-2\">\n                    <span class=\"text-gray-500 font-medium text-md\">Description : </span>\n                    <p class=\"text-gray-500 text-lg font-medium !mb-0\">{{ module.description }}</p>\n                </div>\n                <div class=\"w-full h-[1px] bg-gray-200 rounded-full my-4\"></div>\n                <!-- Attachments -->\n                <div class=\"mt-4\">\n                    <h3 class=\"font-semibold text-lg text-gray-900 mb-3\">Ressources</h3>\n                    <div *ngIf=\"module.attachments.length > 0\"\n                        class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n                        <a *ngFor=\"let attachment of module.attachments\" [href]=\"attachment.lien\" target=\"_blank\"\n                            class=\"group border rounded-lg p-4 bg-secondary hover:border-blue-500 transition-colors\">\n                            <div class=\"flex items-center space-x-3\">\n                                <img [src]=\"getFileIcon(attachment.type)\" alt=\"File Icon\" class=\"w-14\" />\n                                <div>\n                                    <p class=\"font-medium text-gray-700 group-hover:text-blue-600 truncate !mb-0\">\n                                        Fichier {{ attachment.type }}\n                                    </p>\n                                    <p class=\"text-sm text-gray-500 truncate !mb-0\">Cliquer pour voir</p>\n                                </div>\n                            </div>\n                        </a>\n                    </div>\n                    <div *ngIf=\"module.attachments.length === 0\"\n                        class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\">\n\n                        <a\n                            class=\"group border rounded-lg p-4 bg-red-200/20 hover:border-blue-500 transition-colors cursor-none\">\n                            <div class=\"flex items-center space-x-3\">\n                                <img src=\"/assets/icons/nofile.svg\" alt=\"File Icon\" class=\"w-14\" />\n                                <div>\n                                    <p class=\"font-medium text-gray-700 group-hover:text-blue-600 truncate !mb-0\">\n                                        Aucun Fichier\n                                    </p>\n                                    <p class=\"text-sm text-gray-500 truncate !mb-0\">Aucun fichier attaché</p>\n                                </div>\n                            </div>\n                        </a>\n                    </div>\n                </div>\n\n\n            </div>\n\n            <!-- No Modules Message -->\n            <div *ngIf=\"formation.modules.length === 0\" class=\"bg-white rounded-lg shadow-md p-6\">\n                <h2 class=\"text-2xl font-bold text-gray-900 mb-4\">Modules de Formation</h2>\n\n                <div class=\"flex\">\n                    <a class=\"w-full relative group border rounded-lg p-4 bg-red-200/20 transition-colors\">\n                        <div class=\"flex items-center space-x-3\">\n                            <img src=\"/assets/icons/nofile.svg\" alt=\"File Icon\" class=\"w-14\" />\n                            <div>\n                                <p class=\"font-medium text-gray-700 truncate !mb-0\">\n                                    Aucun Module\n                                </p>\n                                <p class=\"text-sm text-gray-500 truncate !mb-0\">Aucun module attaché</p>\n                            </div>\n                        </div>\n                    </a>\n                </div>\n            </div>\n        </div>\n\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CondidatFormation } from '../../core/models';\nimport { CondidatService } from '../../core/condidat.service';\n\n@Component({\n  selector: 'app-formations',\n  templateUrl: './formations.component.html',\n  styleUrls: ['./formations.component.scss']\n})\nexport class FormationsComponent implements OnInit {\n  formations: CondidatFormation[] = [];\n\n  isLoading: boolean = false;\n  constructor(private condidatFormationService: CondidatService) { }\n\n\n\n  onViewDetails(formationId: number) {\n    console.log('View details for formation ID:', formationId);\n    // Navigate or perform action\n  }\n  ngOnInit(): void {\n    this.fetchFormations()\n  }\n  fetchFormations() {\n    this.isLoading = true;\n    this.condidatFormationService.getFormations().subscribe({\n      next: (response) => {\n        this.formations = response;\n        this.isLoading = false;\n        console.log(this.formations);\n\n      },\n      error: (error) => {\n        console.error('Error fetching formations:', error);\n        this.isLoading = false;\n      }\n    })\n\n  }\n}\n","<div class=\"animate-fade-in container mx-auto p-6\">\n    <div class=\"flex justify-between items-center mb-8\">\n        <h1 class=\"text-3xl font-bold text-gray-800\">Gestion des formations</h1>\n        <div class=\"flex gap-3\">\n            <button (click)=\"fetchFormations()\" [disabled]=\"isLoading\"\n                class=\"px-4 py-2 bg-gray-100 text-gray-700 rounded-lg shadow-sm text-sm font-medium hover:bg-gray-200 transition-colors flex items-center disabled:opacity-50 disabled:cursor-not-allowed\">\n                <i *ngIf=\"!isLoading\" class=\"fa-solid fa-rotate-right mr-2\"></i>\n\n                <svg *ngIf=\"isLoading\" class=\"animate-spin h-4 w-4 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\"\n                    viewBox=\"0 0 24 24\">\n                    <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                    <path class=\"opacity-75\" fill=\"currentColor\"\n                        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\">\n                    </path>\n                </svg>\n\n                {{ isLoading ? 'Actualisation...' : 'Actualiser' }}\n            </button>\n        </div>\n\n       \n\n    </div>\n    <div class=\"space-y-6\">\n        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div *ngFor=\"let formation of formations\" class=\"col-span-1\">\n                <app-condidat-formation-card [formation]=\"formation\"\n                    (viewDetails)=\"onViewDetails($event)\"></app-condidat-formation-card>\n            </div>\n        </div>\n    \n        <div *ngIf=\"formations.length === 0 && !isLoading\" class=\"text-center py-10\">\n            <p class=\"text-gray-500 text-lg\">Aucune formation ne correspond à votre recherche.</p>\n        </div>\n    </div>\n</div>\n\n<!-- <app-condidat-formation-card [formation]=\"candidateFormation\"\n    (viewDetails)=\"onViewDetails($event)\"></app-condidat-formation-card> -->","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>home works!</p>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { Notification, NotificationType } from 'src/app/core/models/notification.model';\nimport { NotificationService } from 'src/app/core/services/notification.service';\nimport { ToasterService } from 'src/app/core/services/toaster.service';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss']\n})\nexport class NotificationsComponent implements OnInit, OnDestroy {\n  notifications: Notification[] = [];\n  isLoading = true;\n  error: string | null = null;\n  notificationType = NotificationType;\n\n  private subscription = new Subscription();\n\n  constructor(\n    private notificationService: NotificationService,\n    private toaster: ToasterService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    // Indiquer au service que l'utilisateur est sur la page de notifications\n    this.notificationService.enterNotificationsPage();\n\n    // S'abonner aux notifications\n    this.subscription.add(\n      this.notificationService.notifications$.subscribe({\n        next: (notifications) => {\n          this.notifications = notifications;\n          this.isLoading = false;\n        },\n        error: (err) => {\n          this.error = err?.error?.message || 'Erreur lors du chargement des notifications';\n          this.isLoading = false;\n          this.toaster.showError('Erreur', 'Impossible de charger les notifications');\n        }\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    // Indiquer au service que l'utilisateur quitte la page de notifications\n    this.notificationService.exitNotificationsPage();\n\n    // Se désabonner pour éviter les fuites de mémoire\n    this.subscription.unsubscribe();\n  }\n\n  // marque toutes les notifications comme lues\n  markAllAsRead(): void {\n    this.notificationService.markAllAsRead()\n      .subscribe({\n        next: () => {\n          this.notifications.forEach(notification => {\n            notification.received = true;\n          });\n          this.toaster.showInfo('Toutes les notifications ont été marquées comme lues', 'Succès');\n        },\n        error: (err) => {\n          this.toaster.showError('Erreur', 'Impossible de marquer toutes les notifications comme lues');\n        }\n      });\n  }\n\n  // si la notification a une actionUrl on le navigue vers cette url\n  handleNotificationClick(notification: Notification): void {\n    if (notification.actionUrl) {\n      this.router.navigateByUrl(notification.actionUrl);\n    }\n  }\n  // get le coulour de notification \n  getNotificationTypeClass(type: NotificationType): string {\n    switch (type) {\n      case NotificationType.Success:\n        return 'bg-green-50 border-green-500';\n      case NotificationType.Warning:\n        return 'bg-yellow-50 border-yellow-500';\n      case NotificationType.Danger:\n        return 'bg-red-50 border-red-500';\n      case NotificationType.Info:\n      default:\n        return 'bg-blue-50 border-blue-500';\n    }\n  }\n  // get l'icon de notification selon to type du notification \n  getNotificationIconClass(type: NotificationType): string {\n    switch (type) {\n      case NotificationType.Success:\n        return 'text-green-500 fas fa-check-circle';\n      case NotificationType.Warning:\n        return 'text-yellow-500 fas fa-exclamation-triangle';\n      case NotificationType.Danger:\n        return 'text-red-500 fas fa-times-circle';\n      case NotificationType.Info:\n      default:\n        return 'text-blue-500 fas fa-info-circle';\n    }\n  }\n  // juste pour formater la date exemple 'Il y a quelques secondes'  ou \"Il y a minutes\"\n  getTimeAgo(date: Date): string {\n    const now = new Date();\n    const notificationDate = new Date(date);\n    const diffInSeconds = Math.floor((now.getTime() - notificationDate.getTime()) / 1000);\n\n    if (diffInSeconds < 60) {\n      return 'Il y a quelques secondes';\n    } else if (diffInSeconds < 3600) {\n      const minutes = Math.floor(diffInSeconds / 60);\n      return `Il y a ${minutes} minute${minutes > 1 ? 's' : ''}`;\n    } else if (diffInSeconds < 86400) {\n      const hours = Math.floor(diffInSeconds / 3600);\n      return `Il y a ${hours} heure${hours > 1 ? 's' : ''}`;\n    } else {\n      const days = Math.floor(diffInSeconds / 86400);\n      return `Il y a ${days} jour${days > 1 ? 's' : ''}`;\n    }\n  }\n}\n","<div class=\"min-h-screen bg-gray-50 p-8 \">\n    <div class=\"max-w-4xl mx-auto\">\n        <div class=\"flex justify-between items-center mb-6\">\n            <h1 class=\"text-3xl font-bold text-gray-800\">Mes Notifications</h1>\n            <button *ngIf=\"notifications.length > 0\" (click)=\"markAllAsRead()\"\n                class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n                Tout marquer comme lu\n            </button>\n        </div>\n\n        <!-- Loading State -->\n        <div *ngIf=\"isLoading\" class=\"flex justify-center items-center h-64\">\n            <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n        </div>\n\n        <!-- Error State -->\n        <div *ngIf=\"error\" class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\"\n            role=\"alert\">\n            <strong class=\"font-bold\">Erreur!</strong>\n            <span class=\"block sm:inline\">{{ error }}</span>\n        </div>\n\n        <!-- Empty State -->\n        <div *ngIf=\"!isLoading && !error && notifications.length === 0\"\n            class=\"bg-white rounded-lg shadow-md p-8 text-center\">\n            <div class=\"flex flex-col items-center\">\n                <i class=\"fas fa-bell-slash text-gray-400 mb-4\" style=\"font-size: 4rem;\"></i>\n                <h2 class=\"text-xl font-semibold text-gray-700 mb-2\">Aucune notification</h2>\n                <p class=\"text-gray-500\">Vous n'avez pas encore reçu de notifications.</p>\n            </div>\n        </div>\n\n        <!-- Notifications List -->\n        <div *ngIf=\"!isLoading && !error && notifications.length > 0\" class=\"space-y-4\">\n            <div *ngFor=\"let notification of notifications\" [ngClass]=\"getNotificationTypeClass(notification.type)\"\n                class=\"rounded-lg shadow-md p-5 transition-all hover:shadow-lg border-l-4 cursor-pointer\"\n                (click)=\"handleNotificationClick(notification)\">\n                <div class=\"flex\">\n                    <div class=\"flex-shrink-0 mr-4\">\n                        <i [ngClass]=\"getNotificationIconClass(notification.type)\" style=\"font-size: 1.5rem;\"></i>\n                    </div>\n                    <div class=\"flex-1\">\n                        <div class=\"flex items-center mb-1\">\n                            <h3 class=\"font-semibold text-lg text-gray-800 !mb-0 flex-1\">{{ notification.title }}</h3>\n                            <div *ngIf=\"!notification.received\" class=\"ml-2 h-2 w-2 bg-blue-500 rounded-full\"></div>\n                        </div>\n                        <p class=\"text-gray-600 mb-2\">{{ notification.body }}</p>\n                        <div class=\"flex justify-between items-center\">\n                            <p class=\"text-sm text-gray-500\">{{ getTimeAgo(notification.date) }}</p>\n                            <div *ngIf=\"notification.actionUrl\" class=\"text-sm text-blue-600\">\n                                <i class=\"fas fa-arrow-right mr-1\"></i>\n                                Voir plus\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CondidatService } from '../../core/condidat.service';\nimport { ToasterService } from 'src/app/core/services/toaster.service';\nimport { catchError, finalize, of } from 'rxjs';\n\n@Component({\n  selector: 'app-quiz-validation',\n  templateUrl: './quiz-validation.component.html',\n  styleUrls: ['./quiz-validation.component.scss']\n})\nexport class QuizValidationComponent implements OnInit {\n  sessionId!: number;\n  quizId!: number;\n  isLoading = true;\n  error: string | null = null;\n  canTakeQuiz = false;\n  previousAttempt: any = null;\n  formationTitle: string = '';\n  sessionTitle: string = '';\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private condidatService: CondidatService,\n    private toaster: ToasterService\n  ) { }\n\n  ngOnInit(): void {\n    this.sessionId = Number(this.route.snapshot.paramMap.get('sessionId'));\n\n    if (!this.sessionId) {\n      this.error = 'ID de session invalide';\n      this.isLoading = false;\n      return;\n    }\n\n    this.checkQuizEligibility();\n  }\n\n  checkQuizEligibility(): void {\n    this.isLoading = true;\n    this.error = null;\n\n    this.condidatService.checkQuizEligibility(this.sessionId)\n      .pipe(\n        catchError(err => {\n          this.error = err?.error?.message || 'Erreur lors de la vérification de l\\'éligibilité au quiz';\n          return of(null);\n        }),\n        finalize(() => {\n          this.isLoading = false;\n        })\n      )\n      .subscribe(response => {\n        if (!response) return;\n\n        this.canTakeQuiz = response.canTakeQuiz;\n        this.quizId = response.quizId;\n        this.previousAttempt = response.previousAttempt;\n        this.formationTitle = response.formationTitle || '';\n        this.sessionTitle = response.sessionTitle || '';\n      });\n  }\n\n  startQuiz(): void {\n    if (!this.canTakeQuiz) {\n      this.toaster.showInfo('Vous ne pouvez pas passer ce test pour le moment.', 'Information');\n      return;\n    }\n\n    this.router.navigate(['/condidat/quiz', this.quizId, this.sessionId]);\n  }\n\n  goBack(): void {\n    this.router.navigate(['/condidat/formations']);\n  }\n\n  formatDate(dateString: string): string {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('fr-FR', {\n      day: '2-digit',\n      month: '2-digit',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  }\n}\n","<div class=\"min-h-screen bg-gray-50 p-8\">\n    <!-- Loading State -->\n    <div *ngIf=\"isLoading\" class=\"flex justify-center items-center h-64\">\n        <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500\"></div>\n    </div>\n\n    <!-- Error State -->\n    <div *ngIf=\"error\" class=\"p-4 max-w-4xl mx-auto\">\n        <div class=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\" role=\"alert\">\n            <strong class=\"font-bold\">Erreur!</strong>\n            <span class=\"block sm:inline\">{{ error }}</span>\n        </div>\n        <div class=\"mt-4 flex justify-center\">\n            <button (click)=\"goBack()\" class=\"px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300\">\n                Retour aux formations\n            </button>\n        </div>\n    </div>\n\n    <!-- Validation Content -->\n    <div *ngIf=\"!isLoading && !error\" class=\"max-w-4xl mx-auto bg-white rounded-lg shadow-md overflow-hidden\">\n        <!-- Header -->\n        <div class=\"bg-gradient-to-r from-blue-500 to-indigo-600 px-6 py-4\">\n            <h1 class=\"text-2xl font-bold text-white\">Validation du Test</h1>\n            <p class=\"text-blue-100\">{{ formationTitle }} - {{ sessionTitle }}</p>\n        </div>\n\n        <!-- Can Take Quiz -->\n        <div *ngIf=\"canTakeQuiz\" class=\"p-6\">\n            <div class=\"bg-green-50 border-l-4 border-green-500 p-4 mb-6\">\n                <div class=\"flex\">\n                    <div class=\"flex-shrink-0\">\n                        <svg class=\"h-5 w-5 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fill-rule=\"evenodd\"\n                                d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                                clip-rule=\"evenodd\" />\n                        </svg>\n                    </div>\n                    <div class=\"ml-3\">\n                        <p class=\"text-sm text-green-700\">\n                            Vous êtes éligible pour passer ce test.\n                        </p>\n                    </div>\n                </div>\n            </div>\n\n            <p class=\"text-gray-600 mb-6\">\n                Vous êtes sur le point de commencer le test pour cette session de formation. Veuillez vous assurer que vous êtes prêt et que vous disposez du temps nécessaire pour terminer le test.\n            </p>\n\n            <div class=\"bg-gray-50 p-4 rounded-lg mb-6\">\n                <h3 class=\"font-medium text-gray-900 mb-2\">Informations importantes :</h3>\n                <ul class=\"list-disc pl-5 text-gray-600 space-y-1\">\n                    <li>Assurez-vous d'avoir une connexion internet stable</li>\n                    <li>Ne rafraîchissez pas la page pendant le test</li>\n                    <li>Répondez à toutes les questions avant de soumettre</li>\n                    <li>Une fois le test commencé, vous devez le terminer</li>\n                </ul>\n            </div>\n\n            <div class=\"flex justify-end\">\n                <button (click)=\"goBack()\" class=\"px-4 py-2 bg-gray-200 text-gray-700 rounded mr-3 hover:bg-gray-300\">\n                    Annuler\n                </button>\n                <button (click)=\"startQuiz()\"\n                    class=\"px-6 py-2 bg-green-600 text-white rounded hover:bg-green-700 flex items-center\">\n                    <svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\"\n                            d=\"M14 5l7 7m0 0l-7 7m7-7H3\" />\n                    </svg>\n                    Commencer le test\n                </button>\n            </div>\n        </div>\n\n        <!-- Cannot Take Quiz -->\n        <div *ngIf=\"!canTakeQuiz && previousAttempt\" class=\"p-6\">\n            <div class=\"bg-yellow-50 border-l-4 border-yellow-500 p-4 mb-6\">\n                <div class=\"flex\">\n                    <div class=\"flex-shrink-0\">\n                        <svg class=\"h-5 w-5 text-yellow-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                            <path fill-rule=\"evenodd\"\n                                d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\"\n                                clip-rule=\"evenodd\" />\n                        </svg>\n                    </div>\n                    <div class=\"ml-3\">\n                        <p class=\"text-sm text-yellow-700\">\n                            Vous avez déjà passé ce test et ne pouvez pas le repasser pour le moment.\n                        </p>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"bg-white border border-gray-200 rounded-lg p-5 mb-6\">\n                <h3 class=\"font-medium text-gray-900 mb-4\">Résultat de votre dernière tentative :</h3>\n                <div class=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                        <p class=\"text-gray-500\">Date de passage :</p>\n                        <p class=\"font-medium\">{{ formatDate(previousAttempt.createdAt) }}</p>\n                    </div>\n                    <div>\n                        <p class=\"text-gray-500\">Score obtenu :</p>\n                        <p class=\"font-medium\" [ngClass]=\"{\n                            'text-green-600': previousAttempt.score >= 70,\n                            'text-red-600': previousAttempt.score < 70\n                        }\">\n                            {{ previousAttempt.score }}%\n                            <span *ngIf=\"previousAttempt.score >= 70\">(Réussi)</span>\n                            <span *ngIf=\"previousAttempt.score < 70\">(Échoué)</span>\n                        </p>\n                    </div>\n                </div>\n            </div>\n\n            <p class=\"text-gray-600 mb-6\">\n                Vous devez attendre la prochaine session pour pouvoir repasser ce test. Veuillez contacter votre formateur pour plus d'informations.\n            </p>\n\n            <div class=\"flex justify-end\">\n                <button (click)=\"goBack()\" class=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\">\n                    Retour aux formations\n                </button>\n            </div>\n        </div>\n    </div>\n</div>\n","export enum NotificationType {\n    Info = 0,\n    Success = 1,\n    Warning = 2,\n    Danger = 3\n}\n\nexport interface Notification {\n    id: number;\n    title: string;\n    body: string;\n    date: Date;\n    received: boolean;\n    userId: number;\n    type: NotificationType;\n    actionUrl: string | null;\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Certification } from '../models/certification.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CertificationService {\n\n  private apiUrl = `${environment.baseUrl}/certification`;\n\n  constructor(private http: HttpClient) { }\n  getCertifications() {\n    return this.http.get<Certification[]>(this.apiUrl);\n  }\n  getUserCertifications() {\n    return this.http.get<Certification[]>(this.apiUrl + '/user');\n  }\n\n  getCertificationById(id: number) {\n    return this.http.get<Certification>(`${this.apiUrl}/${id}`);\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}