{"version":3,"file":"default-src_app_condidat_quiz_quiz-passing_quiz-passing_component_ts.js","mappings":"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","sources":["./src/app/condidat/quiz/quiz-passing/quiz-passing.component.ts","./src/app/condidat/quiz/quiz-passing/quiz-passing.component.html","./src/app/core/services/toaster.service.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Quiz } from 'src/app/core/models/quiz.model';\nimport { QuizService } from 'src/app/core/services/quiz.service';\nimport { ToasterService } from 'src/app/core/services/toaster.service';\n\n@Component({\n  selector: 'app-quiz-passing',\n  templateUrl: './quiz-passing.component.html',\n  styleUrls: ['./quiz-passing.component.scss']\n})\nexport class QuizPassingComponent implements OnInit {\n  quiz!: Quiz;\n  isLoading = true;\n  error: string | null = null;\n  currentQuestionIndex = 0;\n  selectedAnswers: { [qid: number]: number[] } = {};\n  isFinished = false;\n  score = 0;\n  quizId!: number;\n  sessionId!: number;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private quizService: QuizService,\n    private toaster: ToasterService\n  ) { }\n\n  ngOnInit(): void {\n    this.quizId = +this.route.snapshot.paramMap.get('quizId')!;\n    this.sessionId = +this.route.snapshot.paramMap.get('sessionId')!;\n\n    if (!this.quizId || !this.sessionId) {\n      this.error = 'Paramètres invalides';\n      return;\n    }\n\n    this.loadQuiz(this.quizId);\n  }\n\n  loadQuiz(id: number): void {\n    this.isLoading = true;\n    this.error = null;\n    this.quizService.getQuiz(id).subscribe({\n      next: quiz => {\n        this.quiz = quiz;\n        this.isLoading = false;\n      },\n      error: err => {\n        this.error = err?.error?.message || 'Failed to load quiz.';\n        this.isLoading = false;\n      }\n    });\n  }\n\n  selectAnswer(answerId: number): void {\n    const question = this.quiz.questions[this.currentQuestionIndex];\n    const qid = question.id;\n\n    if (!this.selectedAnswers[qid]) {\n      this.selectedAnswers[qid] = [];\n    }\n\n    if (question.answers.length > 2) {\n      const index = this.selectedAnswers[qid].indexOf(answerId);\n      if (index === -1) {\n        this.selectedAnswers[qid].push(answerId);\n      } else {\n        this.selectedAnswers[qid].splice(index, 1);\n      }\n    } else {\n      this.selectedAnswers[qid] = [answerId];\n    }\n  }\n\n  nextQuestion(): void {\n    const qid = this.quiz.questions[this.currentQuestionIndex].id;\n    if (this.selectedAnswers[qid]?.length > 0) {\n      if (this.currentQuestionIndex < this.quiz.questions.length - 1) {\n        this.currentQuestionIndex++;\n      } else {\n        this.finishQuiz();\n      }\n    } else {\n      this.toaster.showInfo('Please select at least one answer.', 'warning');\n    }\n  }\n\n  finishQuiz(): void {\n    this.isLoading = true;\n\n    // Préparer les réponses au format attendu par l'API\n    const formattedAnswers = Object.entries(this.selectedAnswers).map(([questionId, selectedAnswerIds]) => {\n      return {\n        questionId: parseInt(questionId),\n        selectedAnswerId: selectedAnswerIds[0] // Pour simplifier, on prend la première réponse sélectionnée\n      };\n    });\n\n    // Soumettre les réponses à l'API\n    this.quizService.submitQuizAnswer(this.quizId, this.sessionId, formattedAnswers)\n      .subscribe({\n        next: (result) => {\n          this.isLoading = false;\n          this.isFinished = true;\n          this.score = result.score * this.totalPossiblePoints / 100; // Convertir le pourcentage en points\n\n          // Afficher un message de succès\n          const message = result.passed\n            ? 'Félicitations ! Vous avez réussi le test.'\n            : 'Vous n\\'avez pas obtenu le score minimum requis.';\n\n          this.toaster.showInfo(message, 'Résultat du test');\n        },\n        error: (err) => {\n          this.isLoading = false;\n          this.error = err?.error?.message || 'Une erreur est survenue lors de la soumission du test.';\n          this.toaster.showInfo('Erreur lors de la soumission du test', 'Erreur');\n        }\n      });\n  }\n\n\n\n  // Helper to check if an answer is selected\n  isAnswerSelected(questionId: number, answerId: number): boolean {\n    return this.selectedAnswers[questionId]?.includes(answerId) || false;\n  }\n\n  // Getter for total possible points\n  get totalPossiblePoints(): number {\n    return this.quiz.questions.length * 10; // 10 points per question\n  }\n}","<!-- Loading -->\n<div *ngIf=\"isLoading\" class=\"loading\">\n    Loading your quiz...\n</div>\n\n<!-- Error -->\n<div *ngIf=\"!isLoading && error\" class=\"error\">\n    {{ error }}\n</div>\n\n<!-- Quiz Questions -->\n<div *ngIf=\"!isLoading && !error && quiz && !isFinished\"\n    class=\"quiz-details bg-gray-100 shadow-inner shadow-gray-200 rounded-2xl p-8 max-w-4xl m-auto mt-6\">\n    <h1>{{ quiz.title || 'Untitled Quiz' }}</h1>\n    <p>Created on: {{ quiz.createdAt | date:'dd MMM yyyy' }}</p>\n\n    <div class=\"question\">\n        <!-- Progress Bar -->\n        <div class=\"!my-5 w-full bg-gray-200 rounded-full\">\n            <div class=\"bg-primary text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full transition-colors\"\n                [style.width.%]=\"((currentQuestionIndex + 1) / quiz.questions.length) * 100\">\n                {{ ((currentQuestionIndex + 1) / quiz.questions.length) * 100 | number:'1.0-0' }}%\n            </div>\n        </div>\n\n        <p>{{ quiz.questions[currentQuestionIndex].title }}</p>\n\n        <ul>\n            <li *ngFor=\"let answer of quiz.questions[currentQuestionIndex].answers\" (click)=\"selectAnswer(answer.id)\"\n                [class.selected]=\"isAnswerSelected(quiz.questions[currentQuestionIndex].id, answer.id)\">\n                {{ answer.text || 'No answer text' }}\n            </li>\n        </ul>\n    </div>\n    <div class=\"flex flex-row justify-end w-full mt-8\">\n        <button (click)=\"nextQuestion()\"\n            class=\"btn-next disabled:opacity-80 bg-primary disabled:bg-primary/80 rounded-lg\">\n            {{ currentQuestionIndex === quiz.questions.length - 1 ? 'Finish' : 'Next' }}\n        </button>\n    </div>\n</div>\n\n<!-- Results -->\n<div *ngIf=\"!isLoading && !error && isFinished\"\n    class=\"quiz-details bg-gray-100 shadow-inner shadow-gray-200 rounded-2xl p-8 max-w-4xl m-auto mt-6\">\n    <h1>Quiz Results</h1>\n    <p class=\"text-center text-xl font-medium mb-4\">\n        You scored <strong>{{ score }}/{{ totalPossiblePoints }}</strong>\n        ({{ (score / totalPossiblePoints * 100) | number:'1.0-0' }}%)\n    </p>\n\n    <!-- Results Progress Bar (Green) -->\n    <div class=\"!my-5 w-full bg-gray-200 rounded-full result-progress-bar mb-8\">\n        <div class=\"bg-green-500 text-xs font-medium text-white text-center p-0.5 leading-none rounded-full transition-colors result-progress-bar__fill\"\n            [style.width.%]=\"(score / totalPossiblePoints * 100)\">\n            {{ (score / totalPossiblePoints * 100) | number:'1.0-0' }}%\n        </div>\n    </div>\n\n    <div *ngFor=\"let q of quiz.questions; let i = index\" class=\"question\">\n        <h3 class=\"!my-5\">\n            {{ i + 1 }}. {{ q.title }}\n        </h3>\n        <ul>\n            <li *ngFor=\"let a of q.answers\" [class.correct]=\"a.isCorrect\"\n                [class.wrong]=\"isAnswerSelected(q.id, a.id) && !a.isCorrect\">\n                {{ a.text }}\n                <span *ngIf=\"a.isCorrect\" class=\"text-green-600 font-semibold\"> (Correct)</span>\n                <span *ngIf=\"isAnswerSelected(q.id, a.id) && !a.isCorrect\" class=\"text-red-600 font-semibold\"> (Your\n                    choice)</span>\n                <span *ngIf=\"isAnswerSelected(q.id, a.id) && a.isCorrect\" class=\"text-green-600 font-semibold\"> (Your\n                    choice)</span>\n            </li>\n        </ul>\n    </div>\n\n    <button [routerLink]=\"['../../']\" class=\"btn-next disabled:opacity-80 bg-primary disabled:bg-primary/80 rounded-lg mt-4\">\n        Back to Home\n    </button>\n</div>","import { Injectable } from '@angular/core';\nimport { MessageService } from 'primeng/api';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToasterService {\n\n  constructor(private messageService: MessageService) { }\n\n  showSuccess(title: string, description: string): void {\n    this.messageService.add({ severity: 'success', summary: title, detail: description });\n  }\n\n  showError(title: string, description: string): void {\n    this.messageService.add({ severity: 'error', summary: title, detail: description });\n  }\n\n  showWarn(title: string, description: string): void {\n    this.messageService.add({ severity: 'warn', summary: title, detail: description });\n  }\n\n  showInfo(title: string, description: string): void {\n    this.messageService.add({ severity: 'info', summary: title, detail: description });\n  }\n\n  handleHttpError(error: any): void {\n    if (typeof error === 'string') {\n      this.showError('Error', error);\n    } else if (error?.message) {\n      this.showError('Error', error.message);\n    } else if (typeof error === 'object') {\n      Object.keys(error).forEach(field => {\n        const fieldErrors = error[field];\n        if (Array.isArray(fieldErrors)) {\n          fieldErrors.forEach((msg: string) => {\n            this.showError(field, msg);\n          });\n        }\n      });\n    } else {\n      this.showError('Error', 'An unexpected error occurred.');\n    }\n  }\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}